#version 330 core


// Timestamp: 4/11/2019
// Input vertex data, different for all executions of this shader.
// testing for tile at 1, 1 ("blue") (it's really GRASS!)
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec2 tileUV;

// Output data ; will be interpolated for each fragment.
out vec2 mmUVs[8];		// for storing the converted UVs for each MM level

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform vec3 worldPosition;
uniform float atlasTextureWidth;
uniform float atlasTileTextureWidth;
														
void findMMLevelUVs(in int mmLevel);																				// finds appropriate UV values
float checkTexelBorders(in float uvCoord, in float pixelUnitValue, in float leftBorder, in float rightBorder);		// checks the texel borders; ensures that the texels are within appropriate ranges
vec2 getTexelBorders(in float inCoord);
float distanceDiff = distance(vertexPosition_modelspace, worldPosition);

void main()
{
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);			// Output position of the vertex, in clip space : MVP * position
	findMMLevelUVs(7);												// Generate all appropriate UV values
}


void findMMLevelUVs(in int mmLevel)
{
	float atlasWidth = atlasTextureWidth;
	//float leftTexelBorder = 512.0f;		       // hard code for testing only
	//float rightTexelBorder = 1024.0f;               // hard code for testing only
	float pixelUnitValue = 1.0f / atlasTextureWidth;         // test
	float halfPixelUnitValue = pixelUnitValue / 2; // test
	//float U_texel_begin = checkTexelBorders(vertexUV.x, pixelUnitValue, leftTexelBorder, rightTexelBorder);
	//float V_texel_begin = checkTexelBorders(vertexUV.y, pixelUnitValue, leftTexelBorder, rightTexelBorder);
	
	vec2 U_borders = getTexelBorders(tileUV.x);
	vec2 V_borders = getTexelBorders(tileUV.y);
	float U_texel_begin = checkTexelBorders(vertexUV.x, pixelUnitValue, U_borders.x, U_borders.y);
	float V_texel_begin = checkTexelBorders(vertexUV.y, pixelUnitValue, V_borders.x, V_borders.y);
	
	mmUVs[0].x = U_texel_begin;		       // set UV for mipmap level 0.
	mmUVs[0].y = V_texel_begin;
	if (mmLevel > 0)			      // set other MM levels
	{
		for (int x = 1; x < (mmLevel + 1); x++)   // remember, we are filling mipmaps, but not at level 0. (done in previous step)
		{
			atlasWidth = atlasWidth / 2;                    // set the atlas width for this mm level
			//leftTexelBorder = leftTexelBorder / 2;
			//rightTexelBorder = rightTexelBorder / 2; // set the rightTexelBorder for this mm level
			
			U_borders.x = U_borders.x / 2;
			U_borders.y = U_borders.y / 2;
			V_borders.x = V_borders.x / 2;
			V_borders.y = V_borders.y / 2;
			
			pixelUnitValue = 1.0f / atlasWidth;          // get the pixelUnitValue for this mmLevel
			halfPixelUnitValue = pixelUnitValue / 2; // test
			//U_texel_begin = checkTexelBorders(vertexUV.x, pixelUnitValue, leftTexelBorder, rightTexelBorder);
			//V_texel_begin = checkTexelBorders(vertexUV.y, pixelUnitValue, leftTexelBorder, rightTexelBorder);
			
			U_texel_begin = checkTexelBorders(vertexUV.x, pixelUnitValue, U_borders.x, U_borders.y);
			V_texel_begin = checkTexelBorders(vertexUV.y, pixelUnitValue, V_borders.x, V_borders.y);
			
			mmUVs[x].x = U_texel_begin;
			mmUVs[x].y = V_texel_begin;
		}
	}
}

float checkTexelBorders(in float uvCoord, in float pixelUnitValue, in float leftBorder, in float rightBorder)
{
    float returnVal;	
	float rightLimit = rightBorder - 1.0f;		// if rightBorderLimit is 1024, the limit is 1023
	float leftLimit = leftBorder + 1.0f;    	// if leftBorderLimit is 512, the limit is 513
	float halfPixelValue = pixelUnitValue /2;	// get the half pixel value
	returnVal = floor(uvCoord / pixelUnitValue);		// basic calculation
	if (returnVal >= rightLimit)						// does the floored value lie beyond the right border limit?
	{
	   returnVal = (rightLimit - 1.0f) + halfPixelValue;
	}
	
	else if (returnVal <= leftLimit)					// does the floored value lie beyond the left border limit?
	{
	   returnVal = (leftLimit + 1.0f) - halfPixelValue;
	}
	
	else
	{
	   returnVal = returnVal + halfPixelValue;
	}
	returnVal = returnVal * pixelUnitValue;
	return returnVal;
}

vec2 getTexelBorders(in float inCoord)
{
	vec2 returnVec;
	int tileCoord = int(inCoord);
	if (tileCoord == 0)
	{
		returnVec.x = 0;
		returnVec.y = atlasTileTextureWidth;
	}
	else
	{
		returnVec.x = tileCoord * atlasTileTextureWidth;
		returnVec.y = (tileCoord * atlasTileTextureWidth) + atlasTileTextureWidth;
	}
	return returnVec;
}





