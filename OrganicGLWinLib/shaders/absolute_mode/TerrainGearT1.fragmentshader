#version 430 core

subroutine void RenderPassType();
subroutine uniform RenderPassType RenderPass;
vec2 getAppropriateUV();

// g-buffer textures
layout(binding = 0) uniform sampler2D terrainTexture;	// texture unit 0 will be the texture being sampled from in pass1, for colors
layout(binding = 1) uniform sampler2D PositionTexture;
layout(binding = 2) uniform sampler2D ColorTexture;
layout(binding = 3) uniform sampler2D DepthTexture;

// inputs
in vec2 mmUVs[8];		// for storing the converted UVs for each MM level
in vec3 Position;	// position
in vec2 UV;			// tex coords, for the quad of pass 2

// outputs; these correspond to values in the drawBuffers call for glDrawBuffers -- GL_NONE, GL_COLOR_ATTACHMENT0, GL_COLOR_ATTACHMENT1
layout (location = 0) out vec4 FragColor;	// actual color output, used in pass2 (texture unit 0)
layout (location = 1) out vec3 PositionData;	// used in pass 2
layout (location = 2) out vec3 ColorData; 		// used in pass 2

subroutine (RenderPassType)
void pass1()
{
	// output to g-buffer textures, position and color
	//PositionData = Position;					// output position to texture unit 1
	
	vec3 testDepth;
	//testDepth.r = gl_FragDepth;
	testDepth.r = gl_FragCoord.z;
	PositionData = testDepth;
	
	ColorData = texture(terrainTexture,getAppropriateUV()).rgb;		// output color to texture unit 2; use the appropriate UV value only
	vec3 testColor;
	testColor.r = 100.0f;
	
	//gl_FragDepth = gl_FragCoord.z;						// REMEMBER: when specifiying what the frag depth will be JUST ONCE, you MUST manually set these values everywhere.
}

subroutine (RenderPassType)
void pass2()
{
	FragColor = texture(ColorTexture, UV);
	//gl_FragDepth = texture(DepthTexture,UV).r;			// REMEMBER: when specifiying what the frag depth will be JUST ONCE, you MUST manually set these values everywhere.
	//gl_FragDepth = 0;
	//float sampledDepth = texture(DepthTexture,UV).r;
	//if (sampledDepth = gl_FragDepth)
	// remember, = is assignment, == is equal to (just like C++)
	//if (sampledDepth == 1.0)
	//{
		//FragColor.r = 100.0f; 
	//}
}

vec2 getAppropriateUV()
{
	//int tempMMLevel = int(textureQueryLod(terrainTexture, mmUVs[0]).x);			// replace this with UV?
	int tempMMLevel = int(textureQueryLod(terrainTexture, UV).x);			// replace this with UV?

	float maxMMLevel = 7.0f;
	if (tempMMLevel >= maxMMLevel)
	{
	    tempMMLevel = int(maxMMLevel);
	}
	vec2 appropriateUV = mmUVs[tempMMLevel];
	return appropriateUV;
}

void main()
{
  RenderPass();
}