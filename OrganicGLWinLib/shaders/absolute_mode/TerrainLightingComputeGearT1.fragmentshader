#version 430 core

vec2 getAppropriateUV();

// NOTES:
// gl_FragDepth = texture(DepthTexture,UV).r;			// REMEMBER: when specifiying what the frag depth will be JUST ONCE, you MUST manually set these values everywhere.
// gl_FragDepth = gl_FragCoord.z;						// REMEMBER: when specifiying what the frag depth will be JUST ONCE, you MUST manually set these values 

// Textures that we will read from to output to the FBO; 4 atlas reads + 1 depth buffer texture
layout(binding = 7) uniform sampler2D terrainTexture;	// GL_TEXTURE7 -- non-light colors for the terrain tile.
layout(binding = 8) uniform sampler2D ambientTexture;	// GL_TEXTURE8 -- ambient property for the terrain tile.
layout(binding = 9) uniform sampler2D diffuseTexture;	// GL_TEXTURE9 -- diffuse property for the terrain tile.
layout(binding = 10) uniform sampler2D specularTexture;	// GL_TEXTURE10 -- specular property for the terrain tile.
//layout(binding = 6) uniform sampler2D DepthTexture;		// optional

// uniform for globalAmbienceMultiplier
uniform float globalAmbienceMultiplier;

// inputs
in vec2 mmUVs[8];	// for storing the converted UVs for each MM level
in vec3 outNormal;
in vec3 Position;	// position
in vec2 UV;			// tex coords, for the quad of pass 2

// G-buffer textures; these correspond to values in the drawBuffers call for glDrawBuffers -- GL_NONE, GL_COLOR_ATTACHMENT0, GL_COLOR_ATTACHMENT1, GL_COLOR_ATTACHMENT2, GL_COLOR_ATTACHMENT3, GL_COLOR_ATTACHMENT4

layout (location = 0) out vec4 FragColor;		// actual color output, used in pass2 (default frame buffer color location)
layout (location = 1) out vec3 PositionData;	// GL_COLOR_ATTACHMENT0; G-buffer for position data created on texture unit GL_TEXTURE1
layout (location = 2) out vec3 AmbientData;		// GL_COLOR_ATTACHMENT1; G-buffer for ambient data created on texture unit GL_TEXTURE2
layout (location = 3) out vec3 DiffuseData;		// GL_COLOR_ATTACHMENT2; G-buffer for diffuse data created on texture unit GL_TEXTURE3
layout (location = 4) out vec3 SpecularData;	// GL_COLOR_ATTACHMENT3; G-buffer for specular data created on texture unit GL_TEXTURE4
layout (location = 5) out vec3 ColorData; 		// GL_COLOR_ATTACHMENT4; G-buffer for color data created on texture unit GL_TEXTURE13
layout (location = 6) out vec3 NormalData;		// GL_COLOR_ATTACHMENT5; G-buffer for normal data created on texture unit GL_TEXTURE14

vec2 getAppropriateUV()
{
	int tempMMLevel = int(textureQueryLod(terrainTexture, mmUVs[0]).x);			// replace this with UV?
	float maxMMLevel = 7.0f;
	if (tempMMLevel >= maxMMLevel)
	{
	    tempMMLevel = int(maxMMLevel);
	}
	vec2 appropriateUV = mmUVs[tempMMLevel];
	return appropriateUV;
}

void main()
{
	// output to g-buffer textures, position and color
	PositionData = Position;
	AmbientData = texture(ambientTexture,getAppropriateUV()).rgb;
	DiffuseData = texture(diffuseTexture,getAppropriateUV()).rgb;
	
	//SpecularData = texture(specularTexture,getAppropriateUV()).rgb;
	vec3 otherMetaData;
	otherMetaData.r = globalAmbienceMultiplier;
	SpecularData = otherMetaData;
	
	ColorData = texture(terrainTexture,getAppropriateUV()).rgb;		// output color to texture unit 2; use the appropriate UV value only
	//ColorData = vec3(1,0,0);
	NormalData = outNormal;
}